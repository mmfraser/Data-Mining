'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.269
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.269.
'
Namespace Project
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ProjectSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Project
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetProjectByIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddPhaseToProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectPhaseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddProjectRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectRolesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectPhasesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddRoleToPhaseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGenericPhasesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectPhaseRoleDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectPhaseRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteProjectPhaseRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTimeAssignedToRoleOnPhaseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTimeAssignedToPhaseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectUsersOnRolesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddProjectUserRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectActivitiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetActiveProjectActivitiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddGenericPhaseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateGenericPhaseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectsUserHasRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectUserRolesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectPhaseRolesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.WindowsApplication1.My.MySettings.Default.HolidayImp_Project_Project
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetProjectByIDCompleted As GetProjectByIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectsCompleted As GetProjectsCompletedEventHandler
        
        '''<remarks/>
        Public Event AddProjectCompleted As AddProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectCompleted As UpdateProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event AddPhaseToProjectCompleted As AddPhaseToProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectPhaseCompleted As UpdateProjectPhaseCompletedEventHandler
        
        '''<remarks/>
        Public Event AddProjectRoleCompleted As AddProjectRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectRoleCompleted As UpdateProjectRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectRolesCompleted As GetProjectRolesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectPhasesCompleted As GetProjectPhasesCompletedEventHandler
        
        '''<remarks/>
        Public Event AddRoleToPhaseCompleted As AddRoleToPhaseCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGenericPhasesCompleted As GetGenericPhasesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectPhaseRoleDataCompleted As GetProjectPhaseRoleDataCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectPhaseRoleCompleted As UpdateProjectPhaseRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteProjectPhaseRoleCompleted As DeleteProjectPhaseRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTimeAssignedToRoleOnPhaseCompleted As GetTimeAssignedToRoleOnPhaseCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTimeAssignedToPhaseCompleted As GetTimeAssignedToPhaseCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectUsersOnRolesCompleted As GetProjectUsersOnRolesCompletedEventHandler
        
        '''<remarks/>
        Public Event AddProjectUserRoleCompleted As AddProjectUserRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectActivitiesCompleted As GetProjectActivitiesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetActiveProjectActivitiesCompleted As GetActiveProjectActivitiesCompletedEventHandler
        
        '''<remarks/>
        Public Event AddGenericPhaseCompleted As AddGenericPhaseCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateGenericPhaseCompleted As UpdateGenericPhaseCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectsUserHasRoleCompleted As GetProjectsUserHasRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectUserRolesCompleted As GetProjectUserRolesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectPhaseRolesCompleted As GetProjectPhaseRolesCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectByID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectByID(ByVal projectId As Integer) As Project1
            Dim results() As Object = Me.Invoke("GetProjectByID", New Object() {projectId})
            Return CType(results(0),Project1)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectByIDAsync(ByVal projectId As Integer)
            Me.GetProjectByIDAsync(projectId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectByIDAsync(ByVal projectId As Integer, ByVal userState As Object)
            If (Me.GetProjectByIDOperationCompleted Is Nothing) Then
                Me.GetProjectByIDOperationCompleted = AddressOf Me.OnGetProjectByIDOperationCompleted
            End If
            Me.InvokeAsync("GetProjectByID", New Object() {projectId}, Me.GetProjectByIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectByIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectByIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectByIDCompleted(Me, New GetProjectByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjects", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjects() As Project1()
            Dim results() As Object = Me.Invoke("GetProjects", New Object(-1) {})
            Return CType(results(0),Project1())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectsAsync()
            Me.GetProjectsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectsAsync(ByVal userState As Object)
            If (Me.GetProjectsOperationCompleted Is Nothing) Then
                Me.GetProjectsOperationCompleted = AddressOf Me.OnGetProjectsOperationCompleted
            End If
            Me.InvokeAsync("GetProjects", New Object(-1) {}, Me.GetProjectsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectsCompleted(Me, New GetProjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddProject(ByVal projectNumber As Integer, ByVal customerCode As String, ByVal projectName As String, ByVal projectDescription As String, ByVal startDate As Date, ByVal targetCompletion As Date, ByVal active As Boolean, ByVal actualCompletion As Date)
            Me.Invoke("AddProject", New Object() {projectNumber, customerCode, projectName, projectDescription, startDate, targetCompletion, active, actualCompletion})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddProjectAsync(ByVal projectNumber As Integer, ByVal customerCode As String, ByVal projectName As String, ByVal projectDescription As String, ByVal startDate As Date, ByVal targetCompletion As Date, ByVal active As Boolean, ByVal actualCompletion As Date)
            Me.AddProjectAsync(projectNumber, customerCode, projectName, projectDescription, startDate, targetCompletion, active, actualCompletion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddProjectAsync(ByVal projectNumber As Integer, ByVal customerCode As String, ByVal projectName As String, ByVal projectDescription As String, ByVal startDate As Date, ByVal targetCompletion As Date, ByVal active As Boolean, ByVal actualCompletion As Date, ByVal userState As Object)
            If (Me.AddProjectOperationCompleted Is Nothing) Then
                Me.AddProjectOperationCompleted = AddressOf Me.OnAddProjectOperationCompleted
            End If
            Me.InvokeAsync("AddProject", New Object() {projectNumber, customerCode, projectName, projectDescription, startDate, targetCompletion, active, actualCompletion}, Me.AddProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddProjectCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateProject(ByVal newProjectObj As Project1)
            Me.Invoke("UpdateProject", New Object() {newProjectObj})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectAsync(ByVal newProjectObj As Project1)
            Me.UpdateProjectAsync(newProjectObj, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectAsync(ByVal newProjectObj As Project1, ByVal userState As Object)
            If (Me.UpdateProjectOperationCompleted Is Nothing) Then
                Me.UpdateProjectOperationCompleted = AddressOf Me.OnUpdateProjectOperationCompleted
            End If
            Me.InvokeAsync("UpdateProject", New Object() {newProjectObj}, Me.UpdateProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddPhaseToProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddPhaseToProject(ByVal projectId As Integer, ByVal targetHoursPP As Double, ByVal targetHoursLoE As Double, ByVal targetStart As Date, ByVal actualStart As Date, ByVal targetEnd As Date, ByVal actualEnd As Date, ByVal phaseId As Integer)
            Me.Invoke("AddPhaseToProject", New Object() {projectId, targetHoursPP, targetHoursLoE, targetStart, actualStart, targetEnd, actualEnd, phaseId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddPhaseToProjectAsync(ByVal projectId As Integer, ByVal targetHoursPP As Double, ByVal targetHoursLoE As Double, ByVal targetStart As Date, ByVal actualStart As Date, ByVal targetEnd As Date, ByVal actualEnd As Date, ByVal phaseId As Integer)
            Me.AddPhaseToProjectAsync(projectId, targetHoursPP, targetHoursLoE, targetStart, actualStart, targetEnd, actualEnd, phaseId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddPhaseToProjectAsync(ByVal projectId As Integer, ByVal targetHoursPP As Double, ByVal targetHoursLoE As Double, ByVal targetStart As Date, ByVal actualStart As Date, ByVal targetEnd As Date, ByVal actualEnd As Date, ByVal phaseId As Integer, ByVal userState As Object)
            If (Me.AddPhaseToProjectOperationCompleted Is Nothing) Then
                Me.AddPhaseToProjectOperationCompleted = AddressOf Me.OnAddPhaseToProjectOperationCompleted
            End If
            Me.InvokeAsync("AddPhaseToProject", New Object() {projectId, targetHoursPP, targetHoursLoE, targetStart, actualStart, targetEnd, actualEnd, phaseId}, Me.AddPhaseToProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddPhaseToProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddPhaseToProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddPhaseToProjectCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectPhase", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateProjectPhase(ByVal oOldPhase As Project_Phase)
            Me.Invoke("UpdateProjectPhase", New Object() {oOldPhase})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectPhaseAsync(ByVal oOldPhase As Project_Phase)
            Me.UpdateProjectPhaseAsync(oOldPhase, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectPhaseAsync(ByVal oOldPhase As Project_Phase, ByVal userState As Object)
            If (Me.UpdateProjectPhaseOperationCompleted Is Nothing) Then
                Me.UpdateProjectPhaseOperationCompleted = AddressOf Me.OnUpdateProjectPhaseOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectPhase", New Object() {oOldPhase}, Me.UpdateProjectPhaseOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectPhaseOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectPhaseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectPhaseCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddProjectRole", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddProjectRole(ByVal projectId As Integer, ByVal dayRate As Double, ByVal roleName As String)
            Me.Invoke("AddProjectRole", New Object() {projectId, dayRate, roleName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddProjectRoleAsync(ByVal projectId As Integer, ByVal dayRate As Double, ByVal roleName As String)
            Me.AddProjectRoleAsync(projectId, dayRate, roleName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddProjectRoleAsync(ByVal projectId As Integer, ByVal dayRate As Double, ByVal roleName As String, ByVal userState As Object)
            If (Me.AddProjectRoleOperationCompleted Is Nothing) Then
                Me.AddProjectRoleOperationCompleted = AddressOf Me.OnAddProjectRoleOperationCompleted
            End If
            Me.InvokeAsync("AddProjectRole", New Object() {projectId, dayRate, roleName}, Me.AddProjectRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddProjectRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddProjectRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddProjectRoleCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectRole", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateProjectRole(ByVal projectRole As Project_Role)
            Me.Invoke("UpdateProjectRole", New Object() {projectRole})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectRoleAsync(ByVal projectRole As Project_Role)
            Me.UpdateProjectRoleAsync(projectRole, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectRoleAsync(ByVal projectRole As Project_Role, ByVal userState As Object)
            If (Me.UpdateProjectRoleOperationCompleted Is Nothing) Then
                Me.UpdateProjectRoleOperationCompleted = AddressOf Me.OnUpdateProjectRoleOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectRole", New Object() {projectRole}, Me.UpdateProjectRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectRoleCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectRoles", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectRoles(ByVal projectId As Integer) As Project_Role()
            Dim results() As Object = Me.Invoke("GetProjectRoles", New Object() {projectId})
            Return CType(results(0),Project_Role())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectRolesAsync(ByVal projectId As Integer)
            Me.GetProjectRolesAsync(projectId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectRolesAsync(ByVal projectId As Integer, ByVal userState As Object)
            If (Me.GetProjectRolesOperationCompleted Is Nothing) Then
                Me.GetProjectRolesOperationCompleted = AddressOf Me.OnGetProjectRolesOperationCompleted
            End If
            Me.InvokeAsync("GetProjectRoles", New Object() {projectId}, Me.GetProjectRolesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectRolesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectRolesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectRolesCompleted(Me, New GetProjectRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectPhases", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectPhases(ByVal projectId As Integer) As Project_Phase()
            Dim results() As Object = Me.Invoke("GetProjectPhases", New Object() {projectId})
            Return CType(results(0),Project_Phase())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectPhasesAsync(ByVal projectId As Integer)
            Me.GetProjectPhasesAsync(projectId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectPhasesAsync(ByVal projectId As Integer, ByVal userState As Object)
            If (Me.GetProjectPhasesOperationCompleted Is Nothing) Then
                Me.GetProjectPhasesOperationCompleted = AddressOf Me.OnGetProjectPhasesOperationCompleted
            End If
            Me.InvokeAsync("GetProjectPhases", New Object() {projectId}, Me.GetProjectPhasesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectPhasesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectPhasesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectPhasesCompleted(Me, New GetProjectPhasesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddRoleToPhase", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddRoleToPhase(ByVal roleId As Integer, ByVal phaseId As Integer, ByVal totalHours As Double)
            Me.Invoke("AddRoleToPhase", New Object() {roleId, phaseId, totalHours})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddRoleToPhaseAsync(ByVal roleId As Integer, ByVal phaseId As Integer, ByVal totalHours As Double)
            Me.AddRoleToPhaseAsync(roleId, phaseId, totalHours, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddRoleToPhaseAsync(ByVal roleId As Integer, ByVal phaseId As Integer, ByVal totalHours As Double, ByVal userState As Object)
            If (Me.AddRoleToPhaseOperationCompleted Is Nothing) Then
                Me.AddRoleToPhaseOperationCompleted = AddressOf Me.OnAddRoleToPhaseOperationCompleted
            End If
            Me.InvokeAsync("AddRoleToPhase", New Object() {roleId, phaseId, totalHours}, Me.AddRoleToPhaseOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddRoleToPhaseOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddRoleToPhaseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddRoleToPhaseCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGenericPhases", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGenericPhases() As Phase()
            Dim results() As Object = Me.Invoke("GetGenericPhases", New Object(-1) {})
            Return CType(results(0),Phase())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGenericPhasesAsync()
            Me.GetGenericPhasesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGenericPhasesAsync(ByVal userState As Object)
            If (Me.GetGenericPhasesOperationCompleted Is Nothing) Then
                Me.GetGenericPhasesOperationCompleted = AddressOf Me.OnGetGenericPhasesOperationCompleted
            End If
            Me.InvokeAsync("GetGenericPhases", New Object(-1) {}, Me.GetGenericPhasesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGenericPhasesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGenericPhasesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGenericPhasesCompleted(Me, New GetGenericPhasesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectPhaseRoleData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectPhaseRoleData(ByVal phaseId As Integer) As Project_Phase_Role()
            Dim results() As Object = Me.Invoke("GetProjectPhaseRoleData", New Object() {phaseId})
            Return CType(results(0),Project_Phase_Role())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectPhaseRoleDataAsync(ByVal phaseId As Integer)
            Me.GetProjectPhaseRoleDataAsync(phaseId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectPhaseRoleDataAsync(ByVal phaseId As Integer, ByVal userState As Object)
            If (Me.GetProjectPhaseRoleDataOperationCompleted Is Nothing) Then
                Me.GetProjectPhaseRoleDataOperationCompleted = AddressOf Me.OnGetProjectPhaseRoleDataOperationCompleted
            End If
            Me.InvokeAsync("GetProjectPhaseRoleData", New Object() {phaseId}, Me.GetProjectPhaseRoleDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectPhaseRoleDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectPhaseRoleDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectPhaseRoleDataCompleted(Me, New GetProjectPhaseRoleDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectPhaseRole", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateProjectPhaseRole(ByVal role As Project_Phase_Role)
            Me.Invoke("UpdateProjectPhaseRole", New Object() {role})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectPhaseRoleAsync(ByVal role As Project_Phase_Role)
            Me.UpdateProjectPhaseRoleAsync(role, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectPhaseRoleAsync(ByVal role As Project_Phase_Role, ByVal userState As Object)
            If (Me.UpdateProjectPhaseRoleOperationCompleted Is Nothing) Then
                Me.UpdateProjectPhaseRoleOperationCompleted = AddressOf Me.OnUpdateProjectPhaseRoleOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectPhaseRole", New Object() {role}, Me.UpdateProjectPhaseRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectPhaseRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectPhaseRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectPhaseRoleCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteProjectPhaseRole", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteProjectPhaseRole(ByVal phaseRoleId As Integer)
            Me.Invoke("DeleteProjectPhaseRole", New Object() {phaseRoleId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteProjectPhaseRoleAsync(ByVal phaseRoleId As Integer)
            Me.DeleteProjectPhaseRoleAsync(phaseRoleId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteProjectPhaseRoleAsync(ByVal phaseRoleId As Integer, ByVal userState As Object)
            If (Me.DeleteProjectPhaseRoleOperationCompleted Is Nothing) Then
                Me.DeleteProjectPhaseRoleOperationCompleted = AddressOf Me.OnDeleteProjectPhaseRoleOperationCompleted
            End If
            Me.InvokeAsync("DeleteProjectPhaseRole", New Object() {phaseRoleId}, Me.DeleteProjectPhaseRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteProjectPhaseRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteProjectPhaseRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteProjectPhaseRoleCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTimeAssignedToRoleOnPhase", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTimeAssignedToRoleOnPhase(ByVal projectPhaseId As Integer, ByVal roleId As Integer) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> System.Nullable(Of Double)
            Dim results() As Object = Me.Invoke("GetTimeAssignedToRoleOnPhase", New Object() {projectPhaseId, roleId})
            Return CType(results(0),System.Nullable(Of Double))
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTimeAssignedToRoleOnPhaseAsync(ByVal projectPhaseId As Integer, ByVal roleId As Integer)
            Me.GetTimeAssignedToRoleOnPhaseAsync(projectPhaseId, roleId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTimeAssignedToRoleOnPhaseAsync(ByVal projectPhaseId As Integer, ByVal roleId As Integer, ByVal userState As Object)
            If (Me.GetTimeAssignedToRoleOnPhaseOperationCompleted Is Nothing) Then
                Me.GetTimeAssignedToRoleOnPhaseOperationCompleted = AddressOf Me.OnGetTimeAssignedToRoleOnPhaseOperationCompleted
            End If
            Me.InvokeAsync("GetTimeAssignedToRoleOnPhase", New Object() {projectPhaseId, roleId}, Me.GetTimeAssignedToRoleOnPhaseOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTimeAssignedToRoleOnPhaseOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTimeAssignedToRoleOnPhaseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTimeAssignedToRoleOnPhaseCompleted(Me, New GetTimeAssignedToRoleOnPhaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTimeAssignedToPhase", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTimeAssignedToPhase(ByVal projectPhaseId As Integer) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> System.Nullable(Of Double)
            Dim results() As Object = Me.Invoke("GetTimeAssignedToPhase", New Object() {projectPhaseId})
            Return CType(results(0),System.Nullable(Of Double))
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTimeAssignedToPhaseAsync(ByVal projectPhaseId As Integer)
            Me.GetTimeAssignedToPhaseAsync(projectPhaseId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTimeAssignedToPhaseAsync(ByVal projectPhaseId As Integer, ByVal userState As Object)
            If (Me.GetTimeAssignedToPhaseOperationCompleted Is Nothing) Then
                Me.GetTimeAssignedToPhaseOperationCompleted = AddressOf Me.OnGetTimeAssignedToPhaseOperationCompleted
            End If
            Me.InvokeAsync("GetTimeAssignedToPhase", New Object() {projectPhaseId}, Me.GetTimeAssignedToPhaseOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTimeAssignedToPhaseOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTimeAssignedToPhaseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTimeAssignedToPhaseCompleted(Me, New GetTimeAssignedToPhaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectUsersOnRoles", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectUsersOnRoles(ByVal projectId As Integer) As Project_User_Role()
            Dim results() As Object = Me.Invoke("GetProjectUsersOnRoles", New Object() {projectId})
            Return CType(results(0),Project_User_Role())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectUsersOnRolesAsync(ByVal projectId As Integer)
            Me.GetProjectUsersOnRolesAsync(projectId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectUsersOnRolesAsync(ByVal projectId As Integer, ByVal userState As Object)
            If (Me.GetProjectUsersOnRolesOperationCompleted Is Nothing) Then
                Me.GetProjectUsersOnRolesOperationCompleted = AddressOf Me.OnGetProjectUsersOnRolesOperationCompleted
            End If
            Me.InvokeAsync("GetProjectUsersOnRoles", New Object() {projectId}, Me.GetProjectUsersOnRolesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectUsersOnRolesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectUsersOnRolesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectUsersOnRolesCompleted(Me, New GetProjectUsersOnRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddProjectUserRole", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddProjectUserRole(ByVal projectRoleId As Integer, ByVal userId As Integer)
            Me.Invoke("AddProjectUserRole", New Object() {projectRoleId, userId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddProjectUserRoleAsync(ByVal projectRoleId As Integer, ByVal userId As Integer)
            Me.AddProjectUserRoleAsync(projectRoleId, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddProjectUserRoleAsync(ByVal projectRoleId As Integer, ByVal userId As Integer, ByVal userState As Object)
            If (Me.AddProjectUserRoleOperationCompleted Is Nothing) Then
                Me.AddProjectUserRoleOperationCompleted = AddressOf Me.OnAddProjectUserRoleOperationCompleted
            End If
            Me.InvokeAsync("AddProjectUserRole", New Object() {projectRoleId, userId}, Me.AddProjectUserRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddProjectUserRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddProjectUserRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddProjectUserRoleCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectActivities", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectActivities() As Activity()
            Dim results() As Object = Me.Invoke("GetProjectActivities", New Object(-1) {})
            Return CType(results(0),Activity())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectActivitiesAsync()
            Me.GetProjectActivitiesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectActivitiesAsync(ByVal userState As Object)
            If (Me.GetProjectActivitiesOperationCompleted Is Nothing) Then
                Me.GetProjectActivitiesOperationCompleted = AddressOf Me.OnGetProjectActivitiesOperationCompleted
            End If
            Me.InvokeAsync("GetProjectActivities", New Object(-1) {}, Me.GetProjectActivitiesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectActivitiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectActivitiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectActivitiesCompleted(Me, New GetProjectActivitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetActiveProjectActivities", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetActiveProjectActivities() As Activity()
            Dim results() As Object = Me.Invoke("GetActiveProjectActivities", New Object(-1) {})
            Return CType(results(0),Activity())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetActiveProjectActivitiesAsync()
            Me.GetActiveProjectActivitiesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetActiveProjectActivitiesAsync(ByVal userState As Object)
            If (Me.GetActiveProjectActivitiesOperationCompleted Is Nothing) Then
                Me.GetActiveProjectActivitiesOperationCompleted = AddressOf Me.OnGetActiveProjectActivitiesOperationCompleted
            End If
            Me.InvokeAsync("GetActiveProjectActivities", New Object(-1) {}, Me.GetActiveProjectActivitiesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetActiveProjectActivitiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetActiveProjectActivitiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetActiveProjectActivitiesCompleted(Me, New GetActiveProjectActivitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddGenericPhase", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddGenericPhase(ByVal phaseName As String, ByVal phaseDescription As String)
            Me.Invoke("AddGenericPhase", New Object() {phaseName, phaseDescription})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddGenericPhaseAsync(ByVal phaseName As String, ByVal phaseDescription As String)
            Me.AddGenericPhaseAsync(phaseName, phaseDescription, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddGenericPhaseAsync(ByVal phaseName As String, ByVal phaseDescription As String, ByVal userState As Object)
            If (Me.AddGenericPhaseOperationCompleted Is Nothing) Then
                Me.AddGenericPhaseOperationCompleted = AddressOf Me.OnAddGenericPhaseOperationCompleted
            End If
            Me.InvokeAsync("AddGenericPhase", New Object() {phaseName, phaseDescription}, Me.AddGenericPhaseOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddGenericPhaseOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddGenericPhaseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddGenericPhaseCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateGenericPhase", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateGenericPhase(ByVal newPhase As Phase)
            Me.Invoke("UpdateGenericPhase", New Object() {newPhase})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateGenericPhaseAsync(ByVal newPhase As Phase)
            Me.UpdateGenericPhaseAsync(newPhase, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateGenericPhaseAsync(ByVal newPhase As Phase, ByVal userState As Object)
            If (Me.UpdateGenericPhaseOperationCompleted Is Nothing) Then
                Me.UpdateGenericPhaseOperationCompleted = AddressOf Me.OnUpdateGenericPhaseOperationCompleted
            End If
            Me.InvokeAsync("UpdateGenericPhase", New Object() {newPhase}, Me.UpdateGenericPhaseOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateGenericPhaseOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateGenericPhaseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateGenericPhaseCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectsUserHasRole", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectsUserHasRole(ByVal userId As Integer) As Project1()
            Dim results() As Object = Me.Invoke("GetProjectsUserHasRole", New Object() {userId})
            Return CType(results(0),Project1())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectsUserHasRoleAsync(ByVal userId As Integer)
            Me.GetProjectsUserHasRoleAsync(userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectsUserHasRoleAsync(ByVal userId As Integer, ByVal userState As Object)
            If (Me.GetProjectsUserHasRoleOperationCompleted Is Nothing) Then
                Me.GetProjectsUserHasRoleOperationCompleted = AddressOf Me.OnGetProjectsUserHasRoleOperationCompleted
            End If
            Me.InvokeAsync("GetProjectsUserHasRole", New Object() {userId}, Me.GetProjectsUserHasRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectsUserHasRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectsUserHasRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectsUserHasRoleCompleted(Me, New GetProjectsUserHasRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectUserRoles", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectUserRoles(ByVal projectId As Integer) As Project_User_Role()
            Dim results() As Object = Me.Invoke("GetProjectUserRoles", New Object() {projectId})
            Return CType(results(0),Project_User_Role())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectUserRolesAsync(ByVal projectId As Integer)
            Me.GetProjectUserRolesAsync(projectId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectUserRolesAsync(ByVal projectId As Integer, ByVal userState As Object)
            If (Me.GetProjectUserRolesOperationCompleted Is Nothing) Then
                Me.GetProjectUserRolesOperationCompleted = AddressOf Me.OnGetProjectUserRolesOperationCompleted
            End If
            Me.InvokeAsync("GetProjectUserRoles", New Object() {projectId}, Me.GetProjectUserRolesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectUserRolesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectUserRolesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectUserRolesCompleted(Me, New GetProjectUserRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectPhaseRoles", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectPhaseRoles(ByVal projectId As Integer) As Project_Phase_Role()
            Dim results() As Object = Me.Invoke("GetProjectPhaseRoles", New Object() {projectId})
            Return CType(results(0),Project_Phase_Role())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectPhaseRolesAsync(ByVal projectId As Integer)
            Me.GetProjectPhaseRolesAsync(projectId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectPhaseRolesAsync(ByVal projectId As Integer, ByVal userState As Object)
            If (Me.GetProjectPhaseRolesOperationCompleted Is Nothing) Then
                Me.GetProjectPhaseRolesOperationCompleted = AddressOf Me.OnGetProjectPhaseRolesOperationCompleted
            End If
            Me.InvokeAsync("GetProjectPhaseRoles", New Object() {projectId}, Me.GetProjectPhaseRolesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectPhaseRolesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectPhaseRolesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectPhaseRolesCompleted(Me, New GetProjectPhaseRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute(TypeName:="Project", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Project1
        
        Private pROJECT_IDField As Integer
        
        Private pROJECT_NUMBERField As Integer
        
        Private pROJECT_NAMEField As String
        
        Private cUSTOMER_CODEField As String
        
        Private cUSTOMER_OBJECTField As Customer
        
        Private pROJECT_DESCRIPTIONField As String
        
        Private sTART_DATEField As Date
        
        Private tARGET_COMPLETION_DATEField As Date
        
        Private aCTUAL_COMPLETION_DATEField As Date
        
        Private aCTIVEField As Boolean
        
        Private outputValueField As String
        
        Private pHASESField() As Project_Phase
        
        '''<remarks/>
        Public Property PROJECT_ID() As Integer
            Get
                Return Me.pROJECT_IDField
            End Get
            Set
                Me.pROJECT_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PROJECT_NUMBER() As Integer
            Get
                Return Me.pROJECT_NUMBERField
            End Get
            Set
                Me.pROJECT_NUMBERField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PROJECT_NAME() As String
            Get
                Return Me.pROJECT_NAMEField
            End Get
            Set
                Me.pROJECT_NAMEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CUSTOMER_CODE() As String
            Get
                Return Me.cUSTOMER_CODEField
            End Get
            Set
                Me.cUSTOMER_CODEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CUSTOMER_OBJECT() As Customer
            Get
                Return Me.cUSTOMER_OBJECTField
            End Get
            Set
                Me.cUSTOMER_OBJECTField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PROJECT_DESCRIPTION() As String
            Get
                Return Me.pROJECT_DESCRIPTIONField
            End Get
            Set
                Me.pROJECT_DESCRIPTIONField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property START_DATE() As Date
            Get
                Return Me.sTART_DATEField
            End Get
            Set
                Me.sTART_DATEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TARGET_COMPLETION_DATE() As Date
            Get
                Return Me.tARGET_COMPLETION_DATEField
            End Get
            Set
                Me.tARGET_COMPLETION_DATEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ACTUAL_COMPLETION_DATE() As Date
            Get
                Return Me.aCTUAL_COMPLETION_DATEField
            End Get
            Set
                Me.aCTUAL_COMPLETION_DATEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ACTIVE() As Boolean
            Get
                Return Me.aCTIVEField
            End Get
            Set
                Me.aCTIVEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OutputValue() As String
            Get
                Return Me.outputValueField
            End Get
            Set
                Me.outputValueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PHASES() As Project_Phase()
            Get
                Return Me.pHASESField
            End Get
            Set
                Me.pHASESField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Customer
        
        Private cUST_CODEField As String
        
        Private cUSTOMER_NAMEField As String
        
        '''<remarks/>
        Public Property CUST_CODE() As String
            Get
                Return Me.cUST_CODEField
            End Get
            Set
                Me.cUST_CODEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CUSTOMER_NAME() As String
            Get
                Return Me.cUSTOMER_NAMEField
            End Get
            Set
                Me.cUSTOMER_NAMEField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Activity
        
        Private aCTIVITY_IDField As Integer
        
        Private aCTIVITY_NAMEField As String
        
        Private aCTIVITY_DESCRIPTIONField As String
        
        Private aCTIVITY_ACTIVEField As Boolean
        
        '''<remarks/>
        Public Property ACTIVITY_ID() As Integer
            Get
                Return Me.aCTIVITY_IDField
            End Get
            Set
                Me.aCTIVITY_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ACTIVITY_NAME() As String
            Get
                Return Me.aCTIVITY_NAMEField
            End Get
            Set
                Me.aCTIVITY_NAMEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ACTIVITY_DESCRIPTION() As String
            Get
                Return Me.aCTIVITY_DESCRIPTIONField
            End Get
            Set
                Me.aCTIVITY_DESCRIPTIONField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ACTIVITY_ACTIVE() As Boolean
            Get
                Return Me.aCTIVITY_ACTIVEField
            End Get
            Set
                Me.aCTIVITY_ACTIVEField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class User
        
        Private uSER_IDField As Integer
        
        Private uSER_NAMEField As String
        
        Private uSER_EMAILField As String
        
        Private sEND_NAG_EMAILField As Boolean
        
        Private iS_ADMINField As Boolean
        
        Private iS_PMOField As Boolean
        
        Private iS_ACTIVEField As Boolean
        
        Private pROJECT_PLAN_NAMEField As String
        
        '''<remarks/>
        Public Property USER_ID() As Integer
            Get
                Return Me.uSER_IDField
            End Get
            Set
                Me.uSER_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property USER_NAME() As String
            Get
                Return Me.uSER_NAMEField
            End Get
            Set
                Me.uSER_NAMEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property USER_EMAIL() As String
            Get
                Return Me.uSER_EMAILField
            End Get
            Set
                Me.uSER_EMAILField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SEND_NAG_EMAIL() As Boolean
            Get
                Return Me.sEND_NAG_EMAILField
            End Get
            Set
                Me.sEND_NAG_EMAILField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IS_ADMIN() As Boolean
            Get
                Return Me.iS_ADMINField
            End Get
            Set
                Me.iS_ADMINField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IS_PMO() As Boolean
            Get
                Return Me.iS_PMOField
            End Get
            Set
                Me.iS_PMOField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IS_ACTIVE() As Boolean
            Get
                Return Me.iS_ACTIVEField
            End Get
            Set
                Me.iS_ACTIVEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PROJECT_PLAN_NAME() As String
            Get
                Return Me.pROJECT_PLAN_NAMEField
            End Get
            Set
                Me.pROJECT_PLAN_NAMEField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Project_User_Role
        
        Private pROJECT_USER_ROLE_IDField As Integer
        
        Private pROJECT_ROLE_IDField As Integer
        
        Private uSER_IDField As Integer
        
        Private uSERField As User
        
        Private pROJECT_ROLEField As Project_Role
        
        '''<remarks/>
        Public Property PROJECT_USER_ROLE_ID() As Integer
            Get
                Return Me.pROJECT_USER_ROLE_IDField
            End Get
            Set
                Me.pROJECT_USER_ROLE_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PROJECT_ROLE_ID() As Integer
            Get
                Return Me.pROJECT_ROLE_IDField
            End Get
            Set
                Me.pROJECT_ROLE_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property USER_ID() As Integer
            Get
                Return Me.uSER_IDField
            End Get
            Set
                Me.uSER_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property USER() As User
            Get
                Return Me.uSERField
            End Get
            Set
                Me.uSERField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PROJECT_ROLE() As Project_Role
            Get
                Return Me.pROJECT_ROLEField
            End Get
            Set
                Me.pROJECT_ROLEField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Project_Role
        
        Private pROJECT_ROLE_IDField As Integer
        
        Private pROJECT_IDField As Integer
        
        Private pROJECT_OBJECTField As Project1
        
        Private dAY_RATEField As Double
        
        Private rOLE_NAMEField As String
        
        '''<remarks/>
        Public Property PROJECT_ROLE_ID() As Integer
            Get
                Return Me.pROJECT_ROLE_IDField
            End Get
            Set
                Me.pROJECT_ROLE_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PROJECT_ID() As Integer
            Get
                Return Me.pROJECT_IDField
            End Get
            Set
                Me.pROJECT_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PROJECT_OBJECT() As Project1
            Get
                Return Me.pROJECT_OBJECTField
            End Get
            Set
                Me.pROJECT_OBJECTField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DAY_RATE() As Double
            Get
                Return Me.dAY_RATEField
            End Get
            Set
                Me.dAY_RATEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ROLE_NAME() As String
            Get
                Return Me.rOLE_NAMEField
            End Get
            Set
                Me.rOLE_NAMEField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Project_Phase_Role
        
        Private pROJECT_PHASE_ROLE_IDField As Integer
        
        Private pROJECT_ROLE_IDField As Integer
        
        Private pROJECT_ROLEField As Project_Role
        
        Private pROJECT_PHASE_IDField As Integer
        
        Private tOTAL_HOURSField As Double
        
        '''<remarks/>
        Public Property PROJECT_PHASE_ROLE_ID() As Integer
            Get
                Return Me.pROJECT_PHASE_ROLE_IDField
            End Get
            Set
                Me.pROJECT_PHASE_ROLE_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PROJECT_ROLE_ID() As Integer
            Get
                Return Me.pROJECT_ROLE_IDField
            End Get
            Set
                Me.pROJECT_ROLE_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PROJECT_ROLE() As Project_Role
            Get
                Return Me.pROJECT_ROLEField
            End Get
            Set
                Me.pROJECT_ROLEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PROJECT_PHASE_ID() As Integer
            Get
                Return Me.pROJECT_PHASE_IDField
            End Get
            Set
                Me.pROJECT_PHASE_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TOTAL_HOURS() As Double
            Get
                Return Me.tOTAL_HOURSField
            End Get
            Set
                Me.tOTAL_HOURSField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Phase
        
        Private pHASE_IDField As Integer
        
        Private pHASE_NAMEField As String
        
        Private pHASE_DESCRIPTIONField As String
        
        '''<remarks/>
        Public Property PHASE_ID() As Integer
            Get
                Return Me.pHASE_IDField
            End Get
            Set
                Me.pHASE_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PHASE_NAME() As String
            Get
                Return Me.pHASE_NAMEField
            End Get
            Set
                Me.pHASE_NAMEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PHASE_DESCRIPTION() As String
            Get
                Return Me.pHASE_DESCRIPTIONField
            End Get
            Set
                Me.pHASE_DESCRIPTIONField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Project_Phase
        
        Private pROJECT_PHASE_IDField As Integer
        
        Private pROJECT_IDField As Integer
        
        Private tARGET_HOURS_PPField As Double
        
        Private tARGET_HOURS_LOEField As Double
        
        Private sTART_TARGETField As Date
        
        Private sTART_ACTUALField As System.Nullable(Of Date)
        
        Private eND_TARGETField As Date
        
        Private eND_ACTUALField As System.Nullable(Of Date)
        
        Private pHASE_IDField As Integer
        
        Private pHASEField As Phase
        
        '''<remarks/>
        Public Property PROJECT_PHASE_ID() As Integer
            Get
                Return Me.pROJECT_PHASE_IDField
            End Get
            Set
                Me.pROJECT_PHASE_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PROJECT_ID() As Integer
            Get
                Return Me.pROJECT_IDField
            End Get
            Set
                Me.pROJECT_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TARGET_HOURS_PP() As Double
            Get
                Return Me.tARGET_HOURS_PPField
            End Get
            Set
                Me.tARGET_HOURS_PPField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TARGET_HOURS_LOE() As Double
            Get
                Return Me.tARGET_HOURS_LOEField
            End Get
            Set
                Me.tARGET_HOURS_LOEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property START_TARGET() As Date
            Get
                Return Me.sTART_TARGETField
            End Get
            Set
                Me.sTART_TARGETField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property START_ACTUAL() As System.Nullable(Of Date)
            Get
                Return Me.sTART_ACTUALField
            End Get
            Set
                Me.sTART_ACTUALField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property END_TARGET() As Date
            Get
                Return Me.eND_TARGETField
            End Get
            Set
                Me.eND_TARGETField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property END_ACTUAL() As System.Nullable(Of Date)
            Get
                Return Me.eND_ACTUALField
            End Get
            Set
                Me.eND_ACTUALField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PHASE_ID() As Integer
            Get
                Return Me.pHASE_IDField
            End Get
            Set
                Me.pHASE_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PHASE() As Phase
            Get
                Return Me.pHASEField
            End Get
            Set
                Me.pHASEField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetProjectByIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectByIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectByIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Project1
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Project1)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetProjectsCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Project1()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Project1())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddProjectCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateProjectCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddPhaseToProjectCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateProjectPhaseCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddProjectRoleCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateProjectRoleCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetProjectRolesCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectRolesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectRolesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Project_Role()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Project_Role())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetProjectPhasesCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectPhasesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectPhasesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Project_Phase()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Project_Phase())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddRoleToPhaseCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetGenericPhasesCompletedEventHandler(ByVal sender As Object, ByVal e As GetGenericPhasesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGenericPhasesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Phase()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Phase())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetProjectPhaseRoleDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectPhaseRoleDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectPhaseRoleDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Project_Phase_Role()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Project_Phase_Role())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateProjectPhaseRoleCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteProjectPhaseRoleCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetTimeAssignedToRoleOnPhaseCompletedEventHandler(ByVal sender As Object, ByVal e As GetTimeAssignedToRoleOnPhaseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTimeAssignedToRoleOnPhaseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Nullable(Of Double)
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Nullable(Of Double))
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetTimeAssignedToPhaseCompletedEventHandler(ByVal sender As Object, ByVal e As GetTimeAssignedToPhaseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTimeAssignedToPhaseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Nullable(Of Double)
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Nullable(Of Double))
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetProjectUsersOnRolesCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectUsersOnRolesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectUsersOnRolesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Project_User_Role()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Project_User_Role())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddProjectUserRoleCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetProjectActivitiesCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectActivitiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectActivitiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Activity()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Activity())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetActiveProjectActivitiesCompletedEventHandler(ByVal sender As Object, ByVal e As GetActiveProjectActivitiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetActiveProjectActivitiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Activity()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Activity())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddGenericPhaseCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateGenericPhaseCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetProjectsUserHasRoleCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectsUserHasRoleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectsUserHasRoleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Project1()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Project1())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetProjectUserRolesCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectUserRolesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectUserRolesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Project_User_Role()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Project_User_Role())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetProjectPhaseRolesCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectPhaseRolesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectPhaseRolesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Project_Phase_Role()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Project_Phase_Role())
            End Get
        End Property
    End Class
End Namespace
